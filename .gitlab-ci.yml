# GitLab CI to build Rust+Mynewt Firmware for PineTime Smart Watch
# Based on https://github.com/lupyuen/pinetime-rust-mynewt/blob/master/.github/workflows/main.yml

# Official language image. Look for the different tagged releases at: https://hub.docker.com/r/library/rust/tags/
image: "rust:latest"

build:
  stage: build

  #########################################################################################
  # Checkout

  variables:
    # Clone submodules recursively
    GIT_SUBMODULE_STRATEGY: recursive

  #########################################################################################
  # Download and Cache Dependencies

  before_script:
    # Show files
    - set ; pwd ; ls -l

    # Install Go
    - pushd /tmp    
    - wget -qO- https://golang.org/dl/go1.14.7.linux-amd64.tar.gz | tar -xz
    - popd
    - export PATH=$PATH:/tmp/go/bin
    - go version

    # Install newt
    - source scripts/install-version.sh
    - pushd /tmp
    #  "master" was previously "$mynewt_version". See https://github.com/apache/mynewt-core/pull/2430
    - git clone --branch master https://github.com/apache/mynewt-newt/
    - cd mynewt-newt/
    - go version
    - ./build.sh
    - newt/newt version
    - popd
    - export PATH=$PATH:/tmp/mynewt-newt/newt
    - newt version

    # Download Mynewt source files
    - export PATH=$PATH:/tmp/mynewt-newt/newt
    - source scripts/install-version.sh
    - mkdir repos
    - cp -r patch/repos-windows/.configs repos
    - pushd repos
    - git clone --branch $mcuboot_version https://github.com/JuulLabs-OSS/mcuboot mcuboot
    - git clone --branch $mynewt_version https://github.com/apache/mynewt-core    apache-mynewt-core
    - git clone --branch $nimble_version https://github.com/apache/mynewt-nimble  apache-mynewt-nimble
    - ls -la
    - popd

    # Install Rust Target thumbv7em-none-eabihf
    - rustup default nightly
    - rustup target add thumbv7em-none-eabihf

    # Install Embedded Arm Toolchain arm-none-eabi-gcc
    - pushd /tmp
    - wget -qO- https://developer.arm.com/-/media/Files/downloads/gnu-rm/9-2020q2/gcc-arm-none-eabi-9-2020-q2-update-x86_64-linux.tar.bz2 | tar -xj                
    - popd
    - export PATH=$PATH:/tmp/gcc-arm-none-eabi-9-2020-q2-update/bin
    - arm-none-eabi-gcc --version

  #########################################################################################
  # Build Bootloader and Rust+Mynewt Application Firmware

  script:
    # Set PATH
    - export PATH=$PATH:/tmp/go/bin:/tmp/mynewt-newt/newt:/tmp/gcc-arm-none-eabi-9-2020-q2-update/bin

    # Build Bootloader
    - ./scripts/nrf52/build-boot.sh

    # Build Application Firmware
    - ./scripts/build-app.sh

    # Create Application Firmware Image
    - ./scripts/nrf52/image-app.sh

    # Copy Bootloader and Application Firmware Artifacts to the top level
    - cp bin/targets/nrf52_boot/app/@mcuboot/boot/mynewt/mynewt.* .
    - cp bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.* .

  #########################################################################################
  # Upload Bootloader and Application Firmware

  artifacts:
    paths:
      # Bootloader
      - mynewt.*
      # Application Firmware
      - my_sensor_app.*

  #########################################################################################
  # Cache Outputs

  cache:
    paths:
      - "*.o"
      - /tmp/go
      - /tmp/mynewt-newt
      - /tmp/gcc-arm-none-eabi-9-2020-q2-update

#########################################################################################
# Run Tests

test:
  stage: test
  script:
    - echo "Done!"
